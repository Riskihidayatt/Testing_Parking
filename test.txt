# Prompt untuk Gemini CLI - Sistem Parkir .NET

## Instruksi Utama
Buatkan sistem parkir menggunakan .NET 5 dengan spesifikasi berikut:

### Spesifikasi Teknis
- **Platform**: .NET 5
- **Interface**: Console Application (tanpa UI)
- **Arsitektur**: Sistem lot parkir dengan slot berurutan

### Fitur Utama

#### 1. Manajemen Lot Parkir
- Setiap lot dapat menampung 1 kendaraan (mobil atau motor)
- Jumlah total lot dapat dikonfigurasi saat inisialisasi
- Alokasi slot secara sekuensial (1, 2, 3, dst.)

#### 2. Check-In System
- Kendaraan yang diizinkan: **Mobil Kecil** dan **Motor** saja
- Input data: Nomor Polisi, Warna, Jenis Kendaraan
- Pencatatan berdasarkan nomor polisi
- Biaya parkir per jam (minimal 1 jam untuk kendaraan baru masuk)
- Format input: `park [NOMOR_POLISI] [WARNA] [JENIS_KENDARAAN]`

#### 3. Check-Out System
- Perintah: `leave [SLOT_NUMBER]`
- Slot yang kosong akan tersedia untuk kendaraan lain
- Output: "Slot number X is free"

#### 4. Sistem Pelaporan
Implementasikan command berikut:

- `status` - Menampilkan semua slot terisi dengan format tabel
- `type_of_vehicles [JENIS]` - Hitung kendaraan berdasarkan jenis
- `registration_numbers_for_vehicles_with_ood_plate` - Nomor polisi dengan angka ganjil
- `registration_numbers_for_vehicles_with_event_plate` - Nomor polisi dengan angka genap  
- `registration_numbers_for_vehicles_with_colour [WARNA]` - Nomor polisi berdasarkan warna
- `slot_numbers_for_vehicles_with_colour [WARNA]` - Nomor slot berdasarkan warna
- `slot_number_for_registration_number [NOMOR_POLISI]` - Cari slot berdasarkan nomor polisi

### Format Output yang Diharapkan

#### Inisialisasi:
```
$ create_parking_lot 6
Created a parking lot with 6 slots
```

#### Parkir Kendaraan:
```
$ park B-1234-XYZ Putih Mobil
Allocated slot number: 1
```

#### Status Parkir:
```
Slot No.    Type           Registration No    Colour
1           Mobil          B-1234-XYZ         Putih
2           Motor          B-9999-XYZ         Putih
```

#### Keluar dari Parkir:
```
$ leave 4
Slot number 4 is free
```

### Persyaratan Implementasi

1. **Struktur Data**: Gunakan class/struct untuk Vehicle dan ParkingLot
2. **Validasi Input**: Cek jenis kendaraan yang valid
3. **Error Handling**: Handle kasus parking lot penuh, slot tidak ditemukan, dll.
4. **Command Parser**: Implementasi parser untuk berbagai command
5. **Algoritma Ganjil/Genap**: Logika untuk menentukan nomor polisi ganjil/genap

### Logika Bisnis Khusus
- Deteksi nomor polisi ganjil/genap berdasarkan digit terakhir nomor
- Pencarian case-insensitive untuk warna kendaraan
- Pengelolaan slot kosong untuk assignment ulang

### Command Exit
- `exit` - Keluar dari program

Buatkan kode yang lengkap, terstruktur, dan dapat dijalankan langsung dengan semua fitur di atas. Pastikan output sesuai dengan format yang ditunjukkan dalam contoh.